{-
   Opsgenie REST API

   Opsgenie OpenAPI Specification

   OpenAPI spec version: 2.0
   Opsgenie REST API API version: 2.0.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : OpsgenieREST.API
-}

{-# LANGUAGE ConstraintKinds #-}
{-# LANGUAGE ExistentialQuantification #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE InstanceSigs #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OpsgenieREST.API where

import OpsgenieREST.Core
import OpsgenieREST.MimeTypes
import OpsgenieREST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Base64 as B64
import qualified Data.ByteString.Char8 as BC
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified GHC.Base as P (Alternative)
import qualified Lens.Micro as L
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Monoid ((<>))
import Data.Function ((&))
import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Alert

-- *** acknowledgeAlert

-- | @POST \/v2\/alerts\/{identifier}\/acknowledge@
-- 
-- Acknowledge Alert
-- 
-- Acknowledges alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
acknowledgeAlert 
  :: (Consumes AcknowledgeAlert contentType)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> OpsgenieRESTRequest AcknowledgeAlert contentType SuccessResponse accept
acknowledgeAlert _  _ (Identifier identifier) =
  _mkRequest "POST" ["/v2/alerts/",toPath identifier,"/acknowledge"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data AcknowledgeAlert 

-- | /Body Param/ "body" - Request payload of acknowledging alert action
instance HasBodyParam AcknowledgeAlert AcknowledgeAlertPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam AcknowledgeAlert IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces AcknowledgeAlert MimeJSON


-- *** addAttachment

-- | @POST \/v2\/alerts\/{identifier}\/attachments@
-- 
-- Add Alert Attachment
-- 
-- Add Alert Attachment to related alert
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
addAttachment 
  :: (Consumes AddAttachment contentType)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> File -- ^ "file" -  Attachment file to be uploaded
  -> OpsgenieRESTRequest AddAttachment contentType SuccessResponse accept
addAttachment _  _ (Identifier identifier) (File file) =
  _mkRequest "POST" ["/v2/alerts/",toPath identifier,"/attachments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `_addMultiFormPart` NH.partFileSource "file" file

data AddAttachment  

-- | /Optional Param/ "alertIdentifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam AddAttachment AlertIdentifierType where
  applyOptionalParam req (AlertIdentifierType xs) =
    req `setQuery` toQuery ("alertIdentifierType", Just xs)

-- | /Optional Param/ "user" - Display name of the request owner
instance HasOptionalParam AddAttachment User where
  applyOptionalParam req (User xs) =
    req `_addMultiFormPart` NH.partLBS "user" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "indexFile" - Name of html file which will be shown when attachment clicked on UI
instance HasOptionalParam AddAttachment IndexFile where
  applyOptionalParam req (IndexFile xs) =
    req `_addMultiFormPart` NH.partLBS "indexFile" (mimeRender' MimeMultipartFormData xs)

-- | @multipart/form-data@
instance Consumes AddAttachment MimeMultipartFormData

-- | @application/json@
instance Produces AddAttachment MimeJSON


-- *** addDetails

-- | @POST \/v2\/alerts\/{identifier}\/details@
-- 
-- Add Details
-- 
-- Add details to the alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
addDetails 
  :: (Consumes AddDetails contentType, MimeRender contentType AddDetailsToAlertPayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> AddDetailsToAlertPayload -- ^ "body" -  Request payload of adding alert details action
  -> OpsgenieRESTRequest AddDetails contentType SuccessResponse accept
addDetails _  _ (Identifier identifier) body =
  _mkRequest "POST" ["/v2/alerts/",toPath identifier,"/details"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data AddDetails 

-- | /Body Param/ "body" - Request payload of adding alert details action
instance HasBodyParam AddDetails AddDetailsToAlertPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam AddDetails IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces AddDetails MimeJSON


-- *** addNote

-- | @POST \/v2\/alerts\/{identifier}\/notes@
-- 
-- Add Note
-- 
-- Adds note to alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
addNote 
  :: (Consumes AddNote contentType, MimeRender contentType AddNoteToAlertPayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> AddNoteToAlertPayload -- ^ "body" -  Request payload of adding note to alert action
  -> OpsgenieRESTRequest AddNote contentType SuccessResponse accept
addNote _  _ (Identifier identifier) body =
  _mkRequest "POST" ["/v2/alerts/",toPath identifier,"/notes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data AddNote 

-- | /Body Param/ "body" - Request payload of adding note to alert action
instance HasBodyParam AddNote AddNoteToAlertPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam AddNote IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces AddNote MimeJSON


-- *** addResponder

-- | @POST \/v2\/alerts\/{identifier}\/responders@
-- 
-- Add Responder
-- 
-- Add responder to alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
addResponder 
  :: (Consumes AddResponder contentType, MimeRender contentType AddResponderToAlertPayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> AddResponderToAlertPayload -- ^ "body" -  Request payload of adding responder to alert action
  -> OpsgenieRESTRequest AddResponder contentType SuccessResponse accept
addResponder _  _ (Identifier identifier) body =
  _mkRequest "POST" ["/v2/alerts/",toPath identifier,"/responders"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data AddResponder 

-- | /Body Param/ "body" - Request payload of adding responder to alert action
instance HasBodyParam AddResponder AddResponderToAlertPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam AddResponder IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces AddResponder MimeJSON


-- *** addTags

-- | @POST \/v2\/alerts\/{identifier}\/tags@
-- 
-- Add Tags
-- 
-- Add tags to the alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
addTags 
  :: (Consumes AddTags contentType, MimeRender contentType AddTagsToAlertPayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> AddTagsToAlertPayload -- ^ "body" -  Request payload of creating alert tags action
  -> OpsgenieRESTRequest AddTags contentType SuccessResponse accept
addTags _  _ (Identifier identifier) body =
  _mkRequest "POST" ["/v2/alerts/",toPath identifier,"/tags"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data AddTags 

-- | /Body Param/ "body" - Request payload of creating alert tags action
instance HasBodyParam AddTags AddTagsToAlertPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam AddTags IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces AddTags MimeJSON


-- *** addTeam

-- | @POST \/v2\/alerts\/{identifier}\/teams@
-- 
-- Add Team
-- 
-- Add team to alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
addTeam 
  :: (Consumes AddTeam contentType, MimeRender contentType AddTeamToAlertPayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> AddTeamToAlertPayload -- ^ "body" -  Request payload of adding team to alert action
  -> OpsgenieRESTRequest AddTeam contentType SuccessResponse accept
addTeam _  _ (Identifier identifier) body =
  _mkRequest "POST" ["/v2/alerts/",toPath identifier,"/teams"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data AddTeam 

-- | /Body Param/ "body" - Request payload of adding team to alert action
instance HasBodyParam AddTeam AddTeamToAlertPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam AddTeam IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces AddTeam MimeJSON


-- *** assignAlert

-- | @POST \/v2\/alerts\/{identifier}\/assign@
-- 
-- Assign Alert
-- 
-- Assign alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
assignAlert 
  :: (Consumes AssignAlert contentType, MimeRender contentType AssignAlertPayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> AssignAlertPayload -- ^ "body" -  Request payload of assigning alert action
  -> OpsgenieRESTRequest AssignAlert contentType SuccessResponse accept
assignAlert _  _ (Identifier identifier) body =
  _mkRequest "POST" ["/v2/alerts/",toPath identifier,"/assign"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data AssignAlert 

-- | /Body Param/ "body" - Request payload of assigning alert action
instance HasBodyParam AssignAlert AssignAlertPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam AssignAlert IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces AssignAlert MimeJSON


-- *** closeAlert

-- | @POST \/v2\/alerts\/{identifier}\/close@
-- 
-- Close Alert
-- 
-- Closes alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
closeAlert 
  :: (Consumes CloseAlert contentType)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> OpsgenieRESTRequest CloseAlert contentType SuccessResponse accept
closeAlert _  _ (Identifier identifier) =
  _mkRequest "POST" ["/v2/alerts/",toPath identifier,"/close"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data CloseAlert 

-- | /Body Param/ "body" - Request payload of closing alert action
instance HasBodyParam CloseAlert CloseAlertPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam CloseAlert IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces CloseAlert MimeJSON


-- *** countAlerts

-- | @GET \/v2\/alerts\/count@
-- 
-- Count Alerts
-- 
-- Count alerts in Opsgenie
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
countAlerts 
  :: Accept accept -- ^ request accept ('MimeType')
  -> OpsgenieRESTRequest CountAlerts MimeNoContent GetCountAlertsResponse accept
countAlerts  _ =
  _mkRequest "GET" ["/v2/alerts/count"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data CountAlerts  

-- | /Optional Param/ "query" - Search query to apply while filtering the alerts
instance HasOptionalParam CountAlerts Query where
  applyOptionalParam req (Query xs) =
    req `setQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "searchIdentifier" - Identifier of the saved search query to apply while filtering the alerts
instance HasOptionalParam CountAlerts SearchIdentifier where
  applyOptionalParam req (SearchIdentifier xs) =
    req `setQuery` toQuery ("searchIdentifier", Just xs)

-- | /Optional Param/ "searchIdentifierType" - Identifier type of the saved search query. Possible values are id and name. Default value is id. If searchIdentifier is not provided, this value is ignored.
instance HasOptionalParam CountAlerts SearchIdentifierType where
  applyOptionalParam req (SearchIdentifierType xs) =
    req `setQuery` toQuery ("searchIdentifierType", Just xs)
-- | @application/json@
instance Produces CountAlerts MimeJSON


-- *** createAlert

-- | @POST \/v2\/alerts@
-- 
-- Create Alert
-- 
-- Creates a new alert
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
createAlert 
  :: (Consumes CreateAlert contentType, MimeRender contentType CreateAlertPayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> CreateAlertPayload -- ^ "body" -  Request payload of created alert
  -> OpsgenieRESTRequest CreateAlert contentType SuccessResponse accept
createAlert _  _ body =
  _mkRequest "POST" ["/v2/alerts"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data CreateAlert 

-- | /Body Param/ "body" - Request payload of created alert
instance HasBodyParam CreateAlert CreateAlertPayload 
-- | @application/json@
instance Produces CreateAlert MimeJSON


-- *** createSavedSearches

-- | @POST \/v2\/alerts\/saved-searches@
-- 
-- Create Saved Search
-- 
-- Create saved search with given fields
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
createSavedSearches 
  :: (Consumes CreateSavedSearches contentType, MimeRender contentType CreateSavedSearchPayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> CreateSavedSearchPayload -- ^ "body" -  Request payload of creating saved search
  -> OpsgenieRESTRequest CreateSavedSearches contentType CreateSavedSearchResponse accept
createSavedSearches _  _ body =
  _mkRequest "POST" ["/v2/alerts/saved-searches"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data CreateSavedSearches 

-- | /Body Param/ "body" - Request payload of creating saved search
instance HasBodyParam CreateSavedSearches CreateSavedSearchPayload 
-- | @application/json@
instance Produces CreateSavedSearches MimeJSON


-- *** deleteAlert

-- | @DELETE \/v2\/alerts\/{identifier}@
-- 
-- Delete Alert
-- 
-- Deletes an alert using alert id, tiny id or alias
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
deleteAlert 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> OpsgenieRESTRequest DeleteAlert MimeNoContent SuccessResponse accept
deleteAlert  _ (Identifier identifier) =
  _mkRequest "DELETE" ["/v2/alerts/",toPath identifier]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data DeleteAlert  

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam DeleteAlert IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)

-- | /Optional Param/ "user" - Display name of the request owner
instance HasOptionalParam DeleteAlert User where
  applyOptionalParam req (User xs) =
    req `setQuery` toQuery ("user", Just xs)

-- | /Optional Param/ "source" - Display name of the request source
instance HasOptionalParam DeleteAlert Source where
  applyOptionalParam req (Source xs) =
    req `setQuery` toQuery ("source", Just xs)
-- | @application/json@
instance Produces DeleteAlert MimeJSON


-- *** deleteSavedSearch

-- | @DELETE \/v2\/alerts\/saved-searches\/{identifier}@
-- 
-- Delete Saved Search
-- 
-- Deletes saved search using given search identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
deleteSavedSearch 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of the saved search which could be 'id' or 'name'
  -> OpsgenieRESTRequest DeleteSavedSearch MimeNoContent SuccessResponse accept
deleteSavedSearch  _ (Identifier identifier) =
  _mkRequest "DELETE" ["/v2/alerts/saved-searches/",toPath identifier]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data DeleteSavedSearch  

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', or 'name'
instance HasOptionalParam DeleteSavedSearch IdentifierType2 where
  applyOptionalParam req (IdentifierType2 xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces DeleteSavedSearch MimeJSON


-- *** escalateAlert

-- | @POST \/v2\/alerts\/{identifier}\/escalate@
-- 
-- Escalate Alert
-- 
-- Escalate alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
escalateAlert 
  :: (Consumes EscalateAlert contentType, MimeRender contentType EscalateAlertToNextPayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> EscalateAlertToNextPayload -- ^ "body" -  Request payload of escalating alert action
  -> OpsgenieRESTRequest EscalateAlert contentType SuccessResponse accept
escalateAlert _  _ (Identifier identifier) body =
  _mkRequest "POST" ["/v2/alerts/",toPath identifier,"/escalate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data EscalateAlert 

-- | /Body Param/ "body" - Request payload of escalating alert action
instance HasBodyParam EscalateAlert EscalateAlertToNextPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam EscalateAlert IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces EscalateAlert MimeJSON


-- *** executeCustomAlertAction

-- | @POST \/v2\/alerts\/{identifier}\/actions\/{actionName}@
-- 
-- Custom Alert Action
-- 
-- Custom actions for the alert
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
executeCustomAlertAction 
  :: (Consumes ExecuteCustomAlertAction contentType)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> ActionName -- ^ "actionName" -  Name of the action to execute
  -> OpsgenieRESTRequest ExecuteCustomAlertAction contentType SuccessResponse accept
executeCustomAlertAction _  _ (Identifier identifier) (ActionName actionName) =
  _mkRequest "POST" ["/v2/alerts/",toPath identifier,"/actions/",toPath actionName]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data ExecuteCustomAlertAction 

-- | /Body Param/ "body" - Request payload of executing custom alert action
instance HasBodyParam ExecuteCustomAlertAction ExecuteCustomAlertActionPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam ExecuteCustomAlertAction IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces ExecuteCustomAlertAction MimeJSON


-- *** getAlert

-- | @GET \/v2\/alerts\/{identifier}@
-- 
-- Get Alert
-- 
-- Returns alert with given id, tiny id or alias
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
getAlert 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> OpsgenieRESTRequest GetAlert MimeNoContent GetAlertResponse accept
getAlert  _ (Identifier identifier) =
  _mkRequest "GET" ["/v2/alerts/",toPath identifier]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data GetAlert  

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam GetAlert IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces GetAlert MimeJSON


-- *** getAttachment

-- | @GET \/v2\/alerts\/{identifier}\/attachments\/{attachmentId}@
-- 
-- Get Alert Attachment
-- 
-- Get alert attachment name and url for the given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
getAttachment 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> AttachmentId -- ^ "attachmentId" -  Identifier of alert attachment
  -> OpsgenieRESTRequest GetAttachment MimeNoContent GetAlertAttachmentResponse accept
getAttachment  _ (Identifier identifier) (AttachmentId attachmentId) =
  _mkRequest "GET" ["/v2/alerts/",toPath identifier,"/attachments/",toPath attachmentId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data GetAttachment  

-- | /Optional Param/ "alertIdentifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam GetAttachment AlertIdentifierType where
  applyOptionalParam req (AlertIdentifierType xs) =
    req `setQuery` toQuery ("alertIdentifierType", Just xs)
-- | @application/json@
instance Produces GetAttachment MimeJSON


-- *** getRequestStatus

-- | @GET \/v2\/alerts\/requests\/{requestId}@
-- 
-- Get Request Status of Alert
-- 
-- Used to track the status and alert details (if any) of the request whose identifier is given
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
getRequestStatus 
  :: Accept accept -- ^ request accept ('MimeType')
  -> RequestId -- ^ "requestId" -  Universally unique identifier of the questioned request
  -> OpsgenieRESTRequest GetRequestStatus MimeNoContent GetRequestStatusResponse accept
getRequestStatus  _ (RequestId requestId) =
  _mkRequest "GET" ["/v2/alerts/requests/",toPath requestId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data GetRequestStatus  
-- | @application/json@
instance Produces GetRequestStatus MimeJSON


-- *** getSavedSearch

-- | @GET \/v2\/alerts\/saved-searches\/{identifier}@
-- 
-- Get Saved Search
-- 
-- Get saved search for the given search identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
getSavedSearch 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of the saved search which could be 'id' or 'name'
  -> OpsgenieRESTRequest GetSavedSearch MimeNoContent GetSavedSearchResponse accept
getSavedSearch  _ (Identifier identifier) =
  _mkRequest "GET" ["/v2/alerts/saved-searches/",toPath identifier]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data GetSavedSearch  

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', or 'name'
instance HasOptionalParam GetSavedSearch IdentifierType2 where
  applyOptionalParam req (IdentifierType2 xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces GetSavedSearch MimeJSON


-- *** listAlerts

-- | @GET \/v2\/alerts@
-- 
-- List Alerts
-- 
-- Returns list of alerts
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
listAlerts 
  :: Accept accept -- ^ request accept ('MimeType')
  -> OpsgenieRESTRequest ListAlerts MimeNoContent ListAlertsResponse accept
listAlerts  _ =
  _mkRequest "GET" ["/v2/alerts"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data ListAlerts  

-- | /Optional Param/ "query" - Search query to apply while filtering the alerts
instance HasOptionalParam ListAlerts Query where
  applyOptionalParam req (Query xs) =
    req `setQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "searchIdentifier" - Identifier of the saved search query to apply while filtering the alerts
instance HasOptionalParam ListAlerts SearchIdentifier where
  applyOptionalParam req (SearchIdentifier xs) =
    req `setQuery` toQuery ("searchIdentifier", Just xs)

-- | /Optional Param/ "searchIdentifierType" - Identifier type of the saved search query. Possible values are 'id', or 'name'
instance HasOptionalParam ListAlerts SearchIdentifierType where
  applyOptionalParam req (SearchIdentifierType xs) =
    req `setQuery` toQuery ("searchIdentifierType", Just xs)

-- | /Optional Param/ "offset" - Start index of the result set (to apply pagination). Minimum value (and also default value) is 0
instance HasOptionalParam ListAlerts Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "limit" - Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
instance HasOptionalParam ListAlerts Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "sort" - Name of the field that result set will be sorted by
instance HasOptionalParam ListAlerts Sort where
  applyOptionalParam req (Sort xs) =
    req `setQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "order" - Sorting order of the result set
instance HasOptionalParam ListAlerts Order where
  applyOptionalParam req (Order xs) =
    req `setQuery` toQuery ("order", Just xs)
-- | @application/json@
instance Produces ListAlerts MimeJSON


-- *** listAttachments

-- | @GET \/v2\/alerts\/{identifier}\/attachments@
-- 
-- List Alert Attachments
-- 
-- List alert attachment names and urls for related alert
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
listAttachments 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> OpsgenieRESTRequest ListAttachments MimeNoContent ListAlertAttachmentsResponse accept
listAttachments  _ (Identifier identifier) =
  _mkRequest "GET" ["/v2/alerts/",toPath identifier,"/attachments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data ListAttachments  

-- | /Optional Param/ "alertIdentifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam ListAttachments AlertIdentifierType where
  applyOptionalParam req (AlertIdentifierType xs) =
    req `setQuery` toQuery ("alertIdentifierType", Just xs)
-- | @application/json@
instance Produces ListAttachments MimeJSON


-- *** listLogs

-- | @GET \/v2\/alerts\/{identifier}\/logs@
-- 
-- List Alert Logs
-- 
-- List alert logs for the given alert identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
listLogs 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> OpsgenieRESTRequest ListLogs MimeNoContent ListAlertLogsResponse accept
listLogs  _ (Identifier identifier) =
  _mkRequest "GET" ["/v2/alerts/",toPath identifier,"/logs"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data ListLogs  

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam ListLogs IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)

-- | /Optional Param/ "offset" - Starting value of the offset property
instance HasOptionalParam ListLogs OffsetText where
  applyOptionalParam req (OffsetText xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "direction" - Page direction to apply for the given offset with 'next' and 'prev'
instance HasOptionalParam ListLogs Direction where
  applyOptionalParam req (Direction xs) =
    req `setQuery` toQuery ("direction", Just xs)

-- | /Optional Param/ "limit" - Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
instance HasOptionalParam ListLogs Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "order" - Sorting order of the result set
instance HasOptionalParam ListLogs Order where
  applyOptionalParam req (Order xs) =
    req `setQuery` toQuery ("order", Just xs)
-- | @application/json@
instance Produces ListLogs MimeJSON


-- *** listNotes

-- | @GET \/v2\/alerts\/{identifier}\/notes@
-- 
-- List Alert Notes
-- 
-- List alert notes for the given alert identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
listNotes 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> OpsgenieRESTRequest ListNotes MimeNoContent ListAlertNotesResponse accept
listNotes  _ (Identifier identifier) =
  _mkRequest "GET" ["/v2/alerts/",toPath identifier,"/notes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data ListNotes  

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam ListNotes IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)

-- | /Optional Param/ "offset" - Starting value of the offset property
instance HasOptionalParam ListNotes OffsetText where
  applyOptionalParam req (OffsetText xs) =
    req `setQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "direction" - Page direction to apply for the given offset with 'next' and 'prev'
instance HasOptionalParam ListNotes Direction where
  applyOptionalParam req (Direction xs) =
    req `setQuery` toQuery ("direction", Just xs)

-- | /Optional Param/ "limit" - Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
instance HasOptionalParam ListNotes Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "order" - Sorting order of the result set
instance HasOptionalParam ListNotes Order where
  applyOptionalParam req (Order xs) =
    req `setQuery` toQuery ("order", Just xs)
-- | @application/json@
instance Produces ListNotes MimeJSON


-- *** listRecipients

-- | @GET \/v2\/alerts\/{identifier}\/recipients@
-- 
-- List Alert Recipients
-- 
-- List alert recipients for the given alert identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
listRecipients 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> OpsgenieRESTRequest ListRecipients MimeNoContent ListAlertRecipientsResponse accept
listRecipients  _ (Identifier identifier) =
  _mkRequest "GET" ["/v2/alerts/",toPath identifier,"/recipients"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data ListRecipients  

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam ListRecipients IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces ListRecipients MimeJSON


-- *** listSavedSearches

-- | @GET \/v2\/alerts\/saved-searches@
-- 
-- Lists Saved Searches
-- 
-- List all saved searches
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
listSavedSearches 
  :: Accept accept -- ^ request accept ('MimeType')
  -> OpsgenieRESTRequest ListSavedSearches MimeNoContent ListSavedSearchesResponse accept
listSavedSearches  _ =
  _mkRequest "GET" ["/v2/alerts/saved-searches"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data ListSavedSearches  
-- | @application/json@
instance Produces ListSavedSearches MimeJSON


-- *** removeAttachment

-- | @DELETE \/v2\/alerts\/{identifier}\/attachments\/{attachmentId}@
-- 
-- Remove Alert Attachment
-- 
-- Remove alert attachment for the given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
removeAttachment 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> AttachmentId -- ^ "attachmentId" -  Identifier of alert attachment
  -> OpsgenieRESTRequest RemoveAttachment MimeNoContent SuccessResponse accept
removeAttachment  _ (Identifier identifier) (AttachmentId attachmentId) =
  _mkRequest "DELETE" ["/v2/alerts/",toPath identifier,"/attachments/",toPath attachmentId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data RemoveAttachment  

-- | /Optional Param/ "alertIdentifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam RemoveAttachment AlertIdentifierType where
  applyOptionalParam req (AlertIdentifierType xs) =
    req `setQuery` toQuery ("alertIdentifierType", Just xs)

-- | /Optional Param/ "user" - Display name of the request owner
instance HasOptionalParam RemoveAttachment User where
  applyOptionalParam req (User xs) =
    req `setQuery` toQuery ("user", Just xs)
-- | @application/json@
instance Produces RemoveAttachment MimeJSON


-- *** removeDetails

-- | @DELETE \/v2\/alerts\/{identifier}\/details@
-- 
-- Remove Details
-- 
-- Remove details of the alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
removeDetails 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> Keys -- ^ "keys" -  Comma separated list of keys to remove from the custom properties of the alert (e.g. 'key1,key2')
  -> OpsgenieRESTRequest RemoveDetails MimeNoContent SuccessResponse accept
removeDetails  _ (Identifier identifier) (Keys keys) =
  _mkRequest "DELETE" ["/v2/alerts/",toPath identifier,"/details"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setQuery` toQueryColl CommaSeparated ("keys", Just keys)

data RemoveDetails  

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam RemoveDetails IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)

-- | /Optional Param/ "user" - Display name of the request owner
instance HasOptionalParam RemoveDetails User where
  applyOptionalParam req (User xs) =
    req `setQuery` toQuery ("user", Just xs)

-- | /Optional Param/ "note" - Additional alert note to add
instance HasOptionalParam RemoveDetails Note where
  applyOptionalParam req (Note xs) =
    req `setQuery` toQuery ("note", Just xs)

-- | /Optional Param/ "source" - Display name of the request source
instance HasOptionalParam RemoveDetails Source where
  applyOptionalParam req (Source xs) =
    req `setQuery` toQuery ("source", Just xs)
-- | @application/json@
instance Produces RemoveDetails MimeJSON


-- *** removeTags

-- | @DELETE \/v2\/alerts\/{identifier}\/tags@
-- 
-- Remove Tags
-- 
-- Remove tags of the alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
removeTags 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> Tags -- ^ "tags" -  Tags field of the given alert as comma seperated values (e.g. 'tag1, tag2')
  -> OpsgenieRESTRequest RemoveTags MimeNoContent SuccessResponse accept
removeTags  _ (Identifier identifier) (Tags tags) =
  _mkRequest "DELETE" ["/v2/alerts/",toPath identifier,"/tags"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setQuery` toQueryColl CommaSeparated ("tags", Just tags)

data RemoveTags  

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam RemoveTags IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)

-- | /Optional Param/ "user" - Display name of the request owner
instance HasOptionalParam RemoveTags User where
  applyOptionalParam req (User xs) =
    req `setQuery` toQuery ("user", Just xs)

-- | /Optional Param/ "note" - Additional alert note to add
instance HasOptionalParam RemoveTags Note where
  applyOptionalParam req (Note xs) =
    req `setQuery` toQuery ("note", Just xs)

-- | /Optional Param/ "source" - Display name of the request source
instance HasOptionalParam RemoveTags Source where
  applyOptionalParam req (Source xs) =
    req `setQuery` toQuery ("source", Just xs)
-- | @application/json@
instance Produces RemoveTags MimeJSON


-- *** snoozeAlert

-- | @POST \/v2\/alerts\/{identifier}\/snooze@
-- 
-- Snooze Alert
-- 
-- Snooze alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
snoozeAlert 
  :: (Consumes SnoozeAlert contentType, MimeRender contentType SnoozeAlertPayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> SnoozeAlertPayload -- ^ "body" -  Request payload of snoozing alert action
  -> OpsgenieRESTRequest SnoozeAlert contentType SuccessResponse accept
snoozeAlert _  _ (Identifier identifier) body =
  _mkRequest "POST" ["/v2/alerts/",toPath identifier,"/snooze"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data SnoozeAlert 

-- | /Body Param/ "body" - Request payload of snoozing alert action
instance HasBodyParam SnoozeAlert SnoozeAlertPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam SnoozeAlert IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces SnoozeAlert MimeJSON


-- *** unAcknowledgeAlert

-- | @POST \/v2\/alerts\/{identifier}\/unacknowledge@
-- 
-- UnAcknowledge Alert
-- 
-- UnAcknowledge alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
unAcknowledgeAlert 
  :: (Consumes UnAcknowledgeAlert contentType)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> OpsgenieRESTRequest UnAcknowledgeAlert contentType SuccessResponse accept
unAcknowledgeAlert _  _ (Identifier identifier) =
  _mkRequest "POST" ["/v2/alerts/",toPath identifier,"/unacknowledge"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)

data UnAcknowledgeAlert 

-- | /Body Param/ "body" - Request payload of unacknowledging alert action
instance HasBodyParam UnAcknowledgeAlert UnAcknowledgeAlertPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam UnAcknowledgeAlert IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces UnAcknowledgeAlert MimeJSON


-- *** updateAlertDescription

-- | @PUT \/v2\/alerts\/{identifier}\/description@
-- 
-- Update Alert Description
-- 
-- Update the description of the alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
updateAlertDescription 
  :: (Consumes UpdateAlertDescription contentType, MimeRender contentType UpdateAlertDescriptionPayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> UpdateAlertDescriptionPayload -- ^ "body" -  Request payload of update alert description
  -> OpsgenieRESTRequest UpdateAlertDescription contentType SuccessResponse accept
updateAlertDescription _  _ (Identifier identifier) body =
  _mkRequest "PUT" ["/v2/alerts/",toPath identifier,"/description"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data UpdateAlertDescription 

-- | /Body Param/ "body" - Request payload of update alert description
instance HasBodyParam UpdateAlertDescription UpdateAlertDescriptionPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam UpdateAlertDescription IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces UpdateAlertDescription MimeJSON


-- *** updateAlertMessage

-- | @PUT \/v2\/alerts\/{identifier}\/message@
-- 
-- Update Alert Message
-- 
-- Update the message of the alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
updateAlertMessage 
  :: (Consumes UpdateAlertMessage contentType, MimeRender contentType UpdateAlertMessagePayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> UpdateAlertMessagePayload -- ^ "body" -  Request payload of update alert message
  -> OpsgenieRESTRequest UpdateAlertMessage contentType SuccessResponse accept
updateAlertMessage _  _ (Identifier identifier) body =
  _mkRequest "PUT" ["/v2/alerts/",toPath identifier,"/message"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data UpdateAlertMessage 

-- | /Body Param/ "body" - Request payload of update alert message
instance HasBodyParam UpdateAlertMessage UpdateAlertMessagePayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam UpdateAlertMessage IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces UpdateAlertMessage MimeJSON


-- *** updateAlertPriority

-- | @PUT \/v2\/alerts\/{identifier}\/priority@
-- 
-- Update Alert Priority
-- 
-- Update the priority of the alert with given identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
updateAlertPriority 
  :: (Consumes UpdateAlertPriority contentType, MimeRender contentType UpdateAlertPriorityPayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of alert which could be alert id, tiny id or alert alias
  -> UpdateAlertPriorityPayload -- ^ "body" -  Request payload of update alert priority
  -> OpsgenieRESTRequest UpdateAlertPriority contentType SuccessResponse accept
updateAlertPriority _  _ (Identifier identifier) body =
  _mkRequest "PUT" ["/v2/alerts/",toPath identifier,"/priority"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data UpdateAlertPriority 

-- | /Body Param/ "body" - Request payload of update alert priority
instance HasBodyParam UpdateAlertPriority UpdateAlertPriorityPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
instance HasOptionalParam UpdateAlertPriority IdentifierType where
  applyOptionalParam req (IdentifierType xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces UpdateAlertPriority MimeJSON


-- *** updateSavedSearch

-- | @PATCH \/v2\/alerts\/saved-searches\/{identifier}@
-- 
-- Update Saved Search
-- 
-- Update saved search for the given search identifier
-- 
-- AuthMethod: 'AuthApiKeyGenieKey'
-- 
updateSavedSearch 
  :: (Consumes UpdateSavedSearch contentType, MimeRender contentType UpdateSavedSearchPayload)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Identifier -- ^ "identifier" -  Identifier of the saved search which could be 'id' or 'name'
  -> UpdateSavedSearchPayload -- ^ "body" -  Request payload of updating saved search
  -> OpsgenieRESTRequest UpdateSavedSearch contentType GetSavedSearchResponse accept
updateSavedSearch _  _ (Identifier identifier) body =
  _mkRequest "PATCH" ["/v2/alerts/saved-searches/",toPath identifier]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyGenieKey)
    `setBodyParam` body

data UpdateSavedSearch 

-- | /Body Param/ "body" - Request payload of updating saved search
instance HasBodyParam UpdateSavedSearch UpdateSavedSearchPayload 

-- | /Optional Param/ "identifierType" - Type of the identifier that is provided as an in-line parameter. Possible values are 'id', or 'name'
instance HasOptionalParam UpdateSavedSearch IdentifierType2 where
  applyOptionalParam req (IdentifierType2 xs) =
    req `setQuery` toQuery ("identifierType", Just xs)
-- | @application/json@
instance Produces UpdateSavedSearch MimeJSON



-- * Parameter newtypes

newtype ActionName = ActionName { unActionName :: Text } deriving (P.Eq, P.Show)
newtype AlertIdentifierType = AlertIdentifierType { unAlertIdentifierType :: E'IdentifierType } deriving (P.Eq, P.Show)
newtype AttachmentId = AttachmentId { unAttachmentId :: Integer } deriving (P.Eq, P.Show)
newtype Direction = Direction { unDirection :: E'Direction } deriving (P.Eq, P.Show)
newtype File = File { unFile :: FilePath } deriving (P.Eq, P.Show)
newtype Identifier = Identifier { unIdentifier :: Text } deriving (P.Eq, P.Show)
newtype IdentifierType = IdentifierType { unIdentifierType :: E'IdentifierType } deriving (P.Eq, P.Show)
newtype IdentifierType2 = IdentifierType2 { unIdentifierType2 :: E'SearchIdentifierType } deriving (P.Eq, P.Show)
newtype IndexFile = IndexFile { unIndexFile :: Text } deriving (P.Eq, P.Show)
newtype Keys = Keys { unKeys :: [Text] } deriving (P.Eq, P.Show)
newtype Limit = Limit { unLimit :: Int } deriving (P.Eq, P.Show)
newtype Note = Note { unNote :: Text } deriving (P.Eq, P.Show)
newtype Offset = Offset { unOffset :: Int } deriving (P.Eq, P.Show)
newtype OffsetText = OffsetText { unOffsetText :: Text } deriving (P.Eq, P.Show)
newtype Order = Order { unOrder :: E'Order } deriving (P.Eq, P.Show)
newtype Query = Query { unQuery :: Text } deriving (P.Eq, P.Show)
newtype RequestId = RequestId { unRequestId :: Text } deriving (P.Eq, P.Show)
newtype SearchIdentifier = SearchIdentifier { unSearchIdentifier :: Text } deriving (P.Eq, P.Show)
newtype SearchIdentifierType = SearchIdentifierType { unSearchIdentifierType :: E'SearchIdentifierType } deriving (P.Eq, P.Show)
newtype Sort = Sort { unSort :: E'Sort } deriving (P.Eq, P.Show)
newtype Source = Source { unSource :: Text } deriving (P.Eq, P.Show)
newtype Tags = Tags { unTags :: [Text] } deriving (P.Eq, P.Show)
newtype User = User { unUser :: Text } deriving (P.Eq, P.Show)

-- * Auth Methods

-- ** AuthApiKeyGenieKey
data AuthApiKeyGenieKey =
  AuthApiKeyGenieKey Text -- ^ secret
  deriving (P.Eq, P.Show, P.Typeable)

instance AuthMethod AuthApiKeyGenieKey where
  applyAuthMethod _ a@(AuthApiKeyGenieKey secret) req =
    P.pure $
    if (P.typeOf a `P.elem` rAuthTypes req)
      then req `setHeader` toHeader ("Authorization", secret)
           & L.over rAuthTypesL (P.filter (/= P.typeOf a))
      else req




